const supportsWorkerType=()=>{let e=!1;const t={get type(){e=!0}};try{new Worker("blob://",t)}finally{return e}},main=async()=>{const e=(({dialogBox:e,out:t})=>r=>{e.style.display="block",t.innerText=r})({dialogBox:document.getElementById("error"),out:document.getElementById("errorContent")}),t=document.getElementById("output"),r=document.getElementById("timer");document.getElementById("run").onclick=()=>{const n=new Worker("./worker.js",{type:"module"}),o=new TextDecoder;let a,l;n.postMessage({check:0,input:document.getElementById("input").value,prog:document.getElementById("prog").value}),n.onmessage=i=>{const s=i.data;if(!s.check)throw Error(`Invalid message from worker: ${i}`);switch(s.check){case 4:const m=o.decode(s.bytes);t.value=`${t.value}${m}`;break;case 3:a?l||(l=s.time,r.innerText=l-a+" ms"):a=s.time;break;case 2:e(s.message);break;case 1:n.terminate();break;default:throw Error(`Invalid message from worker: ${i}`)}}}};(async()=>{screen.availHeight>screen.availWidth&&alert("Portrait mode is not supported. Please tilt your device.");document.getElementById("errorHead").innerText="Instructions";document.getElementById("errorContent").innerText='1. Leave a blank line between the program and memory\n2. Type in all the input that will be needed by the program during runtime in the "Input" textbox',document.getElementById("error").style.display="block";if(supportsWorkerType())await main();else{await import("./module-workers-polyfill.min.js");await main()}})();export{};
